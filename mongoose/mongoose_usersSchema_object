> users.usersSchema (schema instance)
Schema {
  obj: 
   { user: 
      { type: [Function: String],
        index: true,
        unique: true,
        trim: true,
        required: true },
     password: { type: [Function: String], default: '1234567' },
     email: 
      { type: [Function: String],
        required: true,
        match: /.+\@.+\..+/,
        index: true } },
  paths: 
   { user: 
      SchemaString {
        enumValues: [],
        regExp: null,
        path: 'user',
        instance: 'String',
        validators: [Object],
        setters: [Object],
        getters: [],
        options: [Object],
        _index: [Object],
        isRequired: true,
        requiredValidator: [Function],
        originalRequiredValue: true },
     password: 
      SchemaString {
        enumValues: [],
        regExp: null,
        path: 'password',
        instance: 'String',
        validators: [],
        setters: [],
        getters: [],
        options: [Object],
        _index: null,
        defaultValue: '1234567' },
     email: 
      SchemaString {
        enumValues: [],
        regExp: null,
        path: 'email',
        instance: 'String',
        validators: [Object],
        setters: [],
        getters: [],
        options: [Object],
        _index: true,
        isRequired: true,
        requiredValidator: [Function],
        originalRequiredValue: true },
     _id: 
      ObjectId {
        path: '_id',
        instance: 'ObjectID',
        validators: [],
        setters: [Object],
        getters: [],
        options: [Object],
        _index: null,
        defaultValue: [Function: defaultId] },
     __v: 
      SchemaNumber {
        path: '__v',
        instance: 'Number',
        validators: [],
        setters: [],
        getters: [],
        options: [Object],
        _index: null } },
  subpaths: {},
  virtuals: { id: VirtualType { path: 'id', getters: [Object], setters: [], options: {} } },
  singleNestedPaths: {},
  nested: {},
  inherits: {},
  callQueue: 
   [ [ 'pre', [Object] ],
     [ 'pre', [Object] ],
     [ 'pre', [Object] ],
     [ 'pre', [Object] ] ],
  _indexes: [],
  methods: { findUser: [Function: findUser] },
  statics: {},
  tree: 
   { user: 
      { required: true,
        trim: true,
        unique: true,
        index: true,
        type: [Function: String] },
     password: { default: '1234567', type: [Function: String] },
     email: 
      { index: true,
        match: /.+\@.+\..+/,
        required: true,
        type: [Function: String] },
     _id: { type: [Object], auto: true },
     id: VirtualType { path: 'id', getters: [Object], setters: [], options: {} },
     __v: [Function: Number] },
  _requiredpaths: [ 'email', 'user' ],
  discriminatorMapping: undefined,
  _indexedpaths: undefined,
  query: {},
  childSchemas: [],
  s: 
   { hooks: Kareem { _pres: {}, _posts: {} },
     kareemHooks: 
      { count: true,
        find: true,
        findOne: true,
        findOneAndUpdate: true,
        findOneAndRemove: true,
        insertMany: true,
        update: true,
        updateMany: true,
        updateOne: true } },
  options: 
   { collection: 'users',
     retainKeyOrder: false,
     typeKey: 'type',
     id: true,
     noVirtualId: false,
     _id: true,
     noId: false,
     validateBeforeSave: true,
     read: null,
     shardKey: null,
     autoIndex: null,
     minimize: true,
     discriminatorKey: '__t',
     versionKey: '__v',
     capped: false,
     bufferCommands: true,
     strict: true,
     pluralization: true },
  '$globalPluginsApplied': true }

